{"version":3,"sources":["images/icon-prev.svg","images/icon-next.svg","images/image-john.jpg","images/image-tanya.jpg","ProfilePicture.js","SlidePanel.js","DevDescription.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ProfilePicture","props","devs","currentDevIndex","currentDevId","className","src","Object","values","picture","alt","description","SlidePanel","onClick","handlePrevButton","prevIcon","handleNextButton","nextIcon","DevDescription","quote","name","position","App","state","John","profilePicJohn","Tanya","profilePicTanya","devCount","updatedDevId","setState","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,wMCgB5BC,EAdQ,SAACC,GACpB,IAAMC,EAAI,eAAOD,EAAMC,MACjBC,EAAkBF,EAAMG,aAAe,EAC7C,OACE,oCACE,yBACEC,UAAU,kBACVC,IAAKC,OAAOC,OAAON,GAAMC,GAAiBM,QAC1CC,IAAKH,OAAOC,OAAON,GAAMC,GAAiBQ,gB,gCCQrCC,EAdI,SAACX,GAClB,OACE,yBAAKI,UAAU,eACb,4BAAQA,UAAU,kBAAkBQ,QAAS,kBAAMZ,EAAMa,qBACvD,yBAAKT,UAAU,WAAWC,IAAKS,IAAUL,IAAI,oBAG/C,4BAAQL,UAAU,mBAAmBQ,QAAS,kBAAMZ,EAAMe,qBACxD,yBAAKX,UAAU,WAAWC,IAAKW,IAAUP,IAAI,kBCEtCQ,EAZQ,SAACjB,GACtB,IAAMC,EAAI,eAAOD,EAAMC,MACjBC,EAAkBF,EAAMG,aAAe,EAC7C,OACE,yBAAKC,UAAU,mBACf,uBAAGA,UAAU,iBAAb,IAA+BE,OAAOC,OAAON,GAAMC,GAAiBgB,MAApE,KACA,uBAAGd,UAAU,gBAAe,gCAASE,OAAOC,OAAON,GAAMC,GAAiBiB,OAC1E,uBAAGf,UAAU,oBAAoBE,OAAOC,OAAON,GAAMC,GAAiBkB,Y,gCC4D3DC,E,4MA5DbC,MAAQ,CACNrB,KAAM,CACJsB,KAAM,CACJf,QAASgB,IACTd,YAAa,0CACbS,KAAM,eACNC,SAAU,6BACVF,MAAM,6MAERO,MAAO,CACLjB,QAASkB,IACThB,YAAa,kCACbS,KAAM,iBACNC,SAAU,cACVF,MAAM,8LAGVS,SAAU,EACVxB,aAAc,G,EAEhBY,iBAAmB,WACjB,IAAIa,EAAe,EAAKN,MAAMnB,aAC1B,EAAKmB,MAAMnB,cAAgB,EAAKmB,MAAMK,SAAW,EACnDC,GAAgB,EAEhBA,EAAe,EAEjB,EAAKC,SAAS,CACZ1B,aAAcyB,IAEhBE,QAAQC,IAAR,6BAAkCH,K,EAEpCf,iBAAmB,WACjB,IAAIe,EAAe,EAAKN,MAAMnB,aAC1B,EAAKmB,MAAMnB,cAAgB,EAAKmB,MAAMK,SACxCC,GAAgB,EAEhBA,EAAe,EAAKN,MAAMK,SAE5B,EAAKE,SAAS,CACZ1B,aAAcyB,IAEhBE,QAAQC,IAAR,6BAAkCH,K,uDAGlC,OACE,yBAAKxB,UAAU,OACb,yBAAKA,UAAU,uBACf,kBAAC,EAAD,CAAgBA,UAAU,sBAAsBH,KAAM+B,KAAKV,MAAMrB,KAAME,aAAc6B,KAAKV,MAAMnB,eAChG,kBAAC,EAAD,CAAYU,iBAAkBmB,KAAKnB,iBAAkBE,iBAAkBiB,KAAKjB,oBAE5E,yBAAKX,UAAU,2BACb,kBAAC,EAAD,CAAgBH,KAAM+B,KAAKV,MAAMrB,KAAME,aAAc6B,KAAKV,MAAMnB,gBAElE,yBAAKC,UAAU,gB,GAvDL6B,IAAMC,WCIJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,c","file":"static/js/main.a1998a84.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-prev.0fa4e8f2.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-next.5421c364.svg\";","module.exports = __webpack_public_path__ + \"static/media/image-john.9c159506.jpg\";","module.exports = __webpack_public_path__ + \"static/media/image-tanya.343537c1.jpg\";","import React from 'react';\r\n\r\nconst ProfilePicture = (props) => {\r\n    const devs = {...props.devs};\r\n    const currentDevIndex = props.currentDevId - 1;\r\n    return(\r\n      <>\r\n        <img \r\n          className='profile-picture' \r\n          src={Object.values(devs)[currentDevIndex].picture} \r\n          alt={Object.values(devs)[currentDevIndex].description}\r\n        />\r\n      </>\r\n    );\r\n}\r\n\r\nexport default ProfilePicture;","import React from 'react';\r\nimport prevIcon from './images/icon-prev.svg';\r\nimport nextIcon from './images/icon-next.svg';\r\n\r\nconst SlidePanel = (props) => {\r\n  return(\r\n    <div className='slide-panel'>\r\n      <button className='nav-button left' onClick={() => props.handlePrevButton()}>\r\n        <img className='nav-icon' src={prevIcon} alt='Go to previous'/>\r\n      </button>\r\n\r\n      <button className='nav-button right' onClick={() => props.handleNextButton()}>\r\n        <img className='nav-icon' src={nextIcon} alt='Go to next'/>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SlidePanel;","import React from 'react';\r\n\r\nconst DevDescription = (props) => {\r\n  const devs = {...props.devs};\r\n  const currentDevIndex = props.currentDevId - 1;\r\n  return(\r\n    <div className='dev-description'>\r\n    <p className='profile-quote'>\"{Object.values(devs)[currentDevIndex].quote}\"</p>\r\n    <p className='profile-name'><strong>{Object.values(devs)[currentDevIndex].name}</strong></p>\r\n    <p className='profile-position'>{Object.values(devs)[currentDevIndex].position}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DevDescription;","import React from 'react';\nimport './App.css';\nimport ProfilePicture from './ProfilePicture';\nimport SlidePanel from './SlidePanel';\nimport DevDescription from './DevDescription';\nimport profilePicJohn from './images/image-john.jpg';\nimport profilePicTanya from './images/image-tanya.jpg'\n\nclass App extends React.Component {\n  state = {\n    devs: {\n      John: {\n        picture: profilePicJohn,\n        description: 'A photo of John, a Junior Front-end Dev',\n        name: 'John Tarkpor',\n        position: 'Junior Front-end Developer',\n        quote: `If you want to lay the best foundation possible I'd recommend taking this course. The depth the instructors go into is incredible. I now feel so confident about starting up as a professional developer.`\n      },\n      Tanya: {\n        picture: profilePicTanya,\n        description: 'A photo of Tanya, a UX Engineer',\n        name: 'Tanya Sinclair',\n        position: 'UX Engineer',\n        quote: `I've been interested in coding for a while but never taken the jump, until now. I couldn't recommend this course enough. I'm now in the job of my dreams and so excited about the future.`,\n      }\n    },\n    devCount: 2,\n    currentDevId: 1\n  }\n  handleNextButton = () => {\n    let updatedDevId = this.state.currentDevId;\n    if (this.state.currentDevId <= this.state.devCount - 1){\n      updatedDevId += 1;\n    }else{\n      updatedDevId = 1;\n    }\n    this.setState({\n      currentDevId: updatedDevId\n    });\n    console.log(`Updated dev ID is: ${updatedDevId}`);\n  }\n  handlePrevButton = () => {\n    let updatedDevId = this.state.currentDevId;\n    if (this.state.currentDevId >= this.state.devCount){\n      updatedDevId -= 1;\n    }else{\n      updatedDevId = this.state.devCount;\n    }\n    this.setState({\n      currentDevId: updatedDevId\n    });\n    console.log(`Updated dev ID is: ${updatedDevId}`);\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <div className='App-picture-section'>\n        <ProfilePicture className='App-profile-picture' devs={this.state.devs} currentDevId={this.state.currentDevId} />\n        <SlidePanel handlePrevButton={this.handlePrevButton} handleNextButton={this.handleNextButton} />\n        </div>\n        <div className='App-description-section'>\n          <DevDescription devs={this.state.devs} currentDevId={this.state.currentDevId} />\n        </div>\n        <div className='footer'></div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}